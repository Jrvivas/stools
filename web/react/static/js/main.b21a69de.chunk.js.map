{"version":3,"sources":["logo.svg","components/NavBar.js","components/Aplicaciones.js","App.js","components/ventanas/Inicio.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","state","user","props","isVisible","commands","botMenu","e","v","setState","className","href","src","logo","width","alt","type","onClick","this","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","style","display","map","item","key","cod","path","nombre","size","name","color","Component","Aplicaciones","apps","logourl","descripcion","App","tipo","urlLogo","clientes","obtenerClientes","a","fetch","data","result","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b21a69de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ba6683b5.svg\";","import React, { Component } from 'react';\r\nimport { Power,PersonFill } from 'react-bootstrap-icons'\r\nimport logo from '../logo.svg';\r\nimport './NavBar.css';\r\n\r\n//import { unstable_renderSubtreeIntoContainer } from 'react-dom';\r\nclass NavBar extends Component {\r\n    state = { user:this.props.user,\r\n              isVisible:false,\r\n              commands:[]\r\n               }\r\n    botMenu=(e)=>{\r\n      let v=!this.state.isVisible\r\n    \r\n      this.setState({isVisible:v})\r\n    }\r\n\r\n    render() { \r\n        return ( <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n            <img  src={logo} width=\"40px\" alt=\"\"/> Sigma Apps</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" onClick={this.botMenu} data-toggle=\"collapse\" data-target=\"#navbarColor02\" aria-controls=\"navbarColor02\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n      \r\n        <div className=\"collapse navbar-collapse\" id=\"navbarColor02\" style={{display: this.state.isVisible?\"inherit\":\"none\"}}>\r\n          <ul className=\"navbar-nav mr-auto\">\r\n\r\n              {this.state.commands.map((item)=>{\r\n                  return   <li className=\"nav-item \" key={item.cod}>\r\n                                <a className=\"nav-link\" href={item.path}>{item.nombre} </a>\r\n                            </li>\r\n              })}\r\n          </ul>\r\n\r\n            <button type=\"button\" className=\"btn btn-primary bg-light btn-logout my-2 my-lg-0\">\r\n                <PersonFill size={24}/>\r\n                <div className=\"txt-btn-logout\">{this.state.user.name}</div>\r\n                <Power color=\"red\" size={26}/>\r\n            </button>\r\n        </div>\r\n      </nav> );\r\n    }\r\n}\r\n \r\nexport default NavBar;","import React, { Component } from 'react';\r\nimport { DistributeVertical } from 'react-bootstrap-icons';\r\nclass Aplicaciones extends Component {\r\n    state = { apps:this.props.apps?this.props.apps:[]}\r\n    render() { \r\n        return (<div className='container mt-5'>\r\n            { this.state.apps.map((item)=>{\r\n                let logo='img/logoApp.png'\r\n                if(item.logourl){\r\n                    logo=item.logourl;\r\n                }\r\n\r\n                     return( <div className=\"card\" style={{width: \"18rem\"}}>\r\n                                <img className=\"card-img-top\" src={logo} alt=\"Card image cap\"/>\r\n                                <div className=\"card-body\">\r\n                                    <h5 className=\"card-title\">{item.nombre}</h5>\r\n                                    <p className=\"card-text\">{item.descripcion}</p>\r\n                                    <a href=\"#\" className=\"btn btn-primary\">Configurar</a>\r\n                                </div>\r\n                            </div>\r\n                            )\r\n                })\r\n            }</div>\r\n          \r\n        );\r\n    }\r\n}\r\n \r\nexport default Aplicaciones;","import React, { Component, useEffect} from 'react';\nimport NavBar from './components/NavBar';\nimport Aplicaciones from './components/Aplicaciones';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Inicio from './components/ventanas/Inicio';\n\n    /*user:{name:'MonicaV',\n                    idAPP:'lsdjlksa',\n                    commands:[{cod:'PDO',nombre:'Pedidos',accion:['L','A','M','B'],path:'/pedido'},\n                              {cod:'PTO',nombre:'Productos',accion:['L','A','M','B'],path:'/producto'},\n                              {cod:'CLTE',nombre:'Clientes',accion:['L','A','M','B'],path:'/cliente'} ]}/*/\n\nclass App extends Component {\n  state={\n          user:{name:'MonicaV',\n                apps:[{nombre:'Gráfica Sigma',\n                      tipo:'GRAFICA',\n                      urlLogo:''},{nombre:'Gráfica Sigma1',\n                      tipo:'GRAFICA',\n                      urlLogo:''},{nombre:'Gráfica Sigma2',\n                      tipo:'GRAFICA',\n                      urlLogo:''}]\n    } ,\n    clientes:[]\n  };\n\n  componentDidMount () {\n        this.obtenerClientes()\n  };\n\n\n  obtenerClientes=async()=>{//&access-token=PAz63nT3yBf5YZol9YosCGEQgFiIqvXTWf1q4MqpD6B1Xr6yRbC9fLsA3FGXwRtdOGTnHb_lm6QUqBuvleM52A==\n      const data=await fetch('http://localhost/yii2/web/index.php?r=contacto%2Flista-ajax&id=216b68d3638b76c2-20200527081443&')\n      if(data){\n            const result= data\n           // this.setState({clientes:result.data})\n            console.log(result)\n      }\n \n\n  };\n\n  render(){\n      return (\n        <Router>\n            <div className=\"\">\n    \n            </div>\n            <Switch>\n              \n              <Route path=\"/\">\n\n                <NavBar user={this.state.user}></NavBar>\n                <Aplicaciones apps={this.state.user.apps}></Aplicaciones>\n\n                \n              </Route>\n\n              <Route path=\"/app\">\n                      \n                \n              </Route>\n\n              <Route>\n\n              </Route>\n             \n            </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\nclass Inicio extends Component {\r\n    state = { commands:this.props.commands }\r\n    render() { \r\n        return ( <div className=\"container\">\r\n            {this.state.commands.map((item)=>{\r\n                let foto='img/funcion.png'\r\n                return(\r\n                    <a href={item.path} className='col-md-3'>\r\n                        <img src={foto} width=\"64px\" alt=''/>\r\n                        <p>{item.nombre}</p>\r\n                    </a>\r\n                )\r\n            })}\r\n        </div> );\r\n    }\r\n}\r\n \r\nexport default Inicio;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}